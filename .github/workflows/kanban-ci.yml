name: Kanban CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 23
      uses: actions/setup-java@v4
      with:
        java-version: '23'
        distribution: 'oracle'
        cache: maven

    - name: Set executable permissions for mvnw
      run: chmod +x backend/mvnw

    - name: Create .env file
      run: |
        cd backend
        echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}" >> .env
        echo "SPRING_DATASOURCE_USERNAME=${{ secrets.POSTGRES_USER }}" >> .env
        echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        
    - name: Build and test backend
      run: |
        cd backend
        ./mvnw clean test jacoco:report
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage
        path: backend/target/site/jacoco

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: npm
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: cd frontend && npm ci --legacy-peer-deps
      
    - name: Build frontend
      run: cd frontend && npm run build
      
    - name: Run linting
      run: cd frontend && npm run lint

    - name: Run tests with coverage
      run: cd frontend && npm run test:coverage
      
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-coverage
        path: frontend/coverage

  generate-badges:
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
            
        - name: Download backend coverage
          uses: actions/download-artifact@v4
          with:
            name: test-coverage
            path: coverage-reports/backend
                
        - name: Download frontend coverage
          uses: actions/download-artifact@v4
          with:
            name: frontend-test-coverage
            path: coverage-reports/frontend
                
        - name: Generate coverage badges
          run: |
            npm install -g lcov-badge-generator
            BACKEND_COVERAGE=$(grep -oP 'Total.*?([0-9]{1,3})%' coverage-reports/backend/index.html | grep -oP '[0-9]{1,3}')
            echo "Backend coverage: $BACKEND_COVERAGE%"
              
            FRONTEND_COVERAGE=$(grep -oP 'Statements.*?([0-9]{1,3}\.[0-9]{1,2})%' coverage-reports/frontend/lcov-report/index.html | grep -oP '[0-9]{1,3}\.[0-9]{1,2}' | head -1)
            echo "Frontend coverage: $FRONTEND_COVERAGE%"
              
            mkdir -p badges
            lcov-badge-generator -o badges/backend-coverage.svg -v $BACKEND_COVERAGE
            lcov-badge-generator -o badges/frontend-coverage.svg -v $FRONTEND_COVERAGE
                  
        - name: Commit and push badges
          run: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Actions - Badge Updater"
                
            # Check if badges directory exists, if not create it
            mkdir -p badges
                
            # Check if README.md already has the badges
            if ! grep -q "backend-coverage.svg" README.md; then
              # Badges don't exist yet - add them
              sed -i '/<img src="https:\/\/img.shields.io\/badge\/java-23-orange"/a \  <img src="https:\/\/github.com\/danielrudzinski\/KanbanProject\/raw\/main\/badges\/backend-coverage.svg" alt="Backend Coverage"\/>\n  <img src="https:\/\/github.com\/danielrudzinski\/KanbanProject\/raw\/main\/badges\/frontend-coverage.svg" alt="Frontend Coverage"\/>' README.md
            fi
                
            # Always add the badges - they will be updated if they've changed
            git add badges/*.svg README.md
                
            # Check if there are changes to commit
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              # Commit and push changes
              git commit -m "Update coverage badges [skip ci]"
                  
              # Configure git to use token for push
              git push
            fi